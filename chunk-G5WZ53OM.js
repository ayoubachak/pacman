import{a,b as p,c as d,d as m,j as h,m as v,w as u}from"./chunk-XOMAETA3.js";var c=[{id:1,name:"Classic Maze",grid:[[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,1],[1,2,1,1,1,2,1,1,2,1,1,2,1,1,2,1,1,1,2,1],[1,3,1,0,1,2,1,1,2,1,1,2,1,1,2,1,0,1,3,1],[1,2,1,1,1,2,1,1,2,1,1,2,1,1,2,1,1,1,2,1],[1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1],[1,2,1,1,1,2,1,1,1,1,1,1,1,1,2,1,1,1,2,1],[1,2,1,1,1,2,1,1,1,1,1,1,1,1,2,1,1,1,2,1],[1,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,1],[1,1,1,1,1,2,1,1,0,1,1,0,1,1,2,1,1,1,1,1],[0,0,0,0,1,2,1,1,0,1,1,0,1,1,2,1,0,0,0,0],[0,0,0,0,1,2,1,1,0,0,0,0,1,1,2,1,0,0,0,0],[0,0,0,0,1,2,1,1,0,4,4,0,1,1,2,1,0,0,0,0],[1,1,1,1,1,2,1,1,0,0,0,0,1,1,2,1,1,1,1,1],[0,0,0,0,0,2,0,0,0,1,1,0,0,0,2,0,0,0,0,0],[1,1,1,1,1,2,1,1,0,1,1,0,1,1,2,1,1,1,1,1],[0,0,0,0,1,2,1,1,0,0,0,0,1,1,2,1,0,0,0,0],[0,0,0,0,1,2,1,1,0,1,1,0,1,1,2,1,0,0,0,0],[0,0,0,0,1,2,1,1,0,1,1,0,1,1,2,1,0,0,0,0],[1,1,1,1,1,2,1,1,0,1,1,0,1,1,2,1,1,1,1,1],[1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1],[1,2,1,1,1,2,1,1,1,1,1,1,1,1,2,1,1,1,2,1],[1,2,1,1,1,2,1,1,1,1,1,1,1,1,2,1,1,1,2,1],[1,3,2,2,1,2,2,2,2,1,1,2,2,2,2,1,2,2,3,1],[1,1,1,2,1,2,1,1,2,1,1,2,1,1,2,1,2,1,1,1],[1,1,1,2,1,2,1,1,2,1,1,2,1,1,2,1,2,1,1,1],[1,2,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,2,1],[1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1],[1,2,2,2,2,2,2,2,2,5,2,2,2,2,2,2,2,2,2,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],dotCount:0},{id:2,name:"Advanced Maze",grid:[[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,3,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,3,1],[1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1],[1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1],[1,2,1,1,2,1,2,1,1,1,1,1,1,2,1,2,1,1,2,1],[1,2,2,2,2,1,2,2,2,1,1,2,2,2,1,2,2,2,2,1],[1,1,1,1,2,1,1,1,0,1,1,0,1,1,1,2,1,1,1,1],[0,0,0,1,2,1,0,0,0,0,0,0,0,0,1,2,1,0,0,0],[1,1,1,1,2,1,0,1,1,4,4,1,1,0,1,2,1,1,1,1],[0,0,0,0,2,0,0,1,0,0,0,0,1,0,0,2,0,0,0,0],[1,1,1,1,2,1,0,1,1,1,1,1,1,0,1,2,1,1,1,1],[0,0,0,1,2,1,0,0,0,0,0,0,0,0,1,2,1,0,0,0],[1,1,1,1,2,1,0,1,1,1,1,1,1,0,1,2,1,1,1,1],[1,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,1],[1,2,1,1,2,1,1,1,2,1,1,2,1,1,1,2,1,1,2,1],[1,3,2,1,2,2,2,2,2,5,2,2,2,2,2,2,1,2,3,1],[1,1,2,1,2,1,2,1,1,1,1,1,1,2,1,2,1,2,1,1],[1,2,2,2,2,1,2,2,2,1,1,2,2,2,1,2,2,2,2,1],[1,2,1,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,2,1],[1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],dotCount:0},{id:3,name:"Spiral Maze",grid:[[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1],[1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1],[1,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,1],[1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1],[1,2,1,2,1,2,2,2,2,2,2,2,2,2,2,1,2,1,2,1],[1,2,1,2,1,2,1,1,1,1,1,1,1,1,2,1,2,1,2,1],[1,2,1,2,1,2,1,3,0,0,0,0,3,1,2,1,2,1,2,1],[1,2,1,2,1,2,1,0,1,1,1,1,0,1,2,1,2,1,2,1],[1,2,1,2,1,2,1,0,1,4,4,1,0,1,2,1,2,1,2,1],[1,2,1,2,1,2,1,0,1,0,0,1,0,1,2,1,2,1,2,1],[1,2,1,2,1,2,1,0,1,1,1,1,0,1,2,1,2,1,2,1],[1,2,1,2,1,2,1,3,0,0,0,0,3,1,2,1,2,1,2,1],[1,2,1,2,1,2,1,1,1,1,1,1,1,1,2,1,2,1,2,1],[1,2,1,2,1,2,2,2,2,2,2,2,2,2,2,1,2,1,2,1],[1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1],[1,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,1],[1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1],[1,2,2,2,2,2,2,2,2,5,2,2,2,2,2,2,2,2,2,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],dotCount:0},{id:4,name:"Labyrinth",grid:[[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,1],[1,2,1,1,2,1,1,1,1,2,2,1,1,1,1,2,1,1,2,1],[1,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,1],[1,2,1,2,1,2,1,1,1,1,1,1,1,1,2,1,2,1,2,1],[1,2,2,2,1,2,1,0,0,0,0,0,0,1,2,1,2,2,2,1],[1,1,1,2,1,2,1,0,1,1,1,1,0,1,2,1,2,1,1,1],[0,0,1,2,1,2,1,0,1,4,4,1,0,1,2,1,2,1,0,0],[1,1,1,2,1,2,1,0,1,1,1,1,0,1,2,1,2,1,1,1],[1,2,2,2,1,2,1,0,0,0,0,0,0,1,2,1,2,2,2,1],[1,2,1,1,1,2,1,1,1,1,1,1,1,1,2,1,1,1,2,1],[1,2,2,2,2,2,2,2,2,5,2,2,2,2,2,2,2,2,2,1],[1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1],[1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1],[1,2,1,2,1,2,1,1,1,1,1,1,1,1,2,1,2,1,2,1],[1,2,1,2,1,2,2,2,2,2,2,2,2,2,2,1,2,1,2,1],[1,2,1,2,1,1,1,1,1,2,2,1,1,1,1,1,2,1,2,1],[1,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,1],[1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],dotCount:0},{id:5,name:"Crossroads",grid:[[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[1,3,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,3,1],[1,2,1,1,1,2,1,1,2,1,1,2,1,1,2,1,1,1,2,1],[1,2,1,0,1,2,1,1,2,1,1,2,1,1,2,1,0,1,2,1],[1,2,1,1,1,2,1,1,2,1,1,2,1,1,2,1,1,1,2,1],[1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1],[1,2,1,1,1,2,1,1,1,1,1,1,1,1,2,1,1,1,2,1],[1,2,2,2,1,2,2,2,2,1,1,2,2,2,2,1,2,2,2,1],[1,1,1,2,1,1,1,1,2,1,1,2,1,1,1,1,2,1,1,1],[0,0,1,2,1,2,2,2,2,2,2,2,2,2,2,1,2,1,0,0],[1,1,1,2,1,2,1,1,0,4,4,0,1,1,2,1,2,1,1,1],[0,0,0,2,2,2,1,0,0,0,0,0,0,1,2,2,2,0,0,0],[1,1,1,2,1,2,1,1,1,1,1,1,1,1,2,1,2,1,1,1],[0,0,1,2,1,2,2,2,2,5,2,2,2,2,2,1,2,1,0,0],[1,1,1,2,1,1,1,1,2,1,1,2,1,1,1,1,2,1,1,1],[1,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,1],[1,2,1,1,1,2,1,1,2,1,1,2,1,1,2,1,1,1,2,1],[1,3,2,2,1,2,2,2,2,2,2,2,2,2,2,1,2,2,3,1],[1,1,1,2,1,2,1,1,1,1,1,1,1,1,2,1,2,1,1,1],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]],dotCount:0}];c.forEach(l=>{let e=0;l.grid.forEach(t=>{t.forEach(o=>{(o===2||o===3)&&e++})}),l.dotCount=e});var P=[{id:"classic",name:"Classic",wallColor:"#2121ff",backgroundColor:"#000",dotColor:"#ffb8ae",powerPelletColor:"#ffb8ae",playerColor:"#ffff00",ghostColors:{0:"#ff0000",1:"#ffb8ff",2:"#00ffff",3:"#ffb852"},frightenedGhostColor:"#2121ff"},{id:"neon",name:"Neon",wallColor:"#00ff00",backgroundColor:"#111",dotColor:"#ff00ff",powerPelletColor:"#ff00ff",playerColor:"#ffff00",ghostColors:{0:"#ff0000",1:"#ff00ff",2:"#00ffff",3:"#ff8c00"},frightenedGhostColor:"#0000ff"},{id:"monochrome",name:"Monochrome",wallColor:"#ffffff",backgroundColor:"#000000",dotColor:"#ffffff",powerPelletColor:"#ffffff",playerColor:"#ffffff",ghostColors:{0:"#aaaaaa",1:"#cccccc",2:"#888888",3:"#dddddd"},frightenedGhostColor:"#444444"}];var E=class l{constructor(e){this.ngZone=e}CELL_SIZE=20;GAME_SPEED=150;POWER_PELLET_DURATION=1e4;GHOST_SPEED_NORMAL=150;GHOST_SPEED_FRIGHTENED=300;gameLoopInterval;gameState=new m(null);currentTheme=new m(P[0]);gameOver=new d;levelCompleted=new d;get gameState$(){return this.gameState.asObservable()}get currentTheme$(){return this.currentTheme.asObservable()}get gameOver$(){return this.gameOver.asObservable()}get levelCompleted$(){return this.levelCompleted.asObservable()}setTheme(e){let t=P.find(o=>o.id===e);t&&this.currentTheme.next(t)}startGame(e=1){console.log(`Starting game with level ID: ${e}`);let t=c.find(i=>i.id===e);t||(e>c.length?(console.log("All levels completed, restarting from level 1"),t=c[0]):(console.log(`Invalid level ID: ${e}, using first level`),t=c[0])),console.log(`Selected level: ${t.name} (ID: ${t.id})`);let o=JSON.parse(JSON.stringify(t));this.stopGameLoop(),this.initializeGame(o),this.startGameLoop()}pauseGame(){if(this.gameState.value){let e=this.gameState.value;this.gameState.next(p(a({},e),{paused:!e.paused})),e.paused?this.startGameLoop():this.stopGameLoop()}}restartGame(){let e=this.gameState.value;e&&(this.initializeGame(e.level),this.startGameLoop())}handleKeyPress(e){let t=this.gameState.value;if(!t||t.paused||t.gameOver)return;let o=t.player;switch(e.key){case"ArrowUp":o.nextDirection=0;break;case"ArrowRight":o.nextDirection=1;break;case"ArrowDown":o.nextDirection=2;break;case"ArrowLeft":o.nextDirection=3;break}this.gameState.next(p(a({},t),{player:o}))}initializeGame(e){let t={x:0,y:0},o=[];for(let n=0;n<e.grid.length;n++)for(let s=0;s<e.grid[n].length;s++)e.grid[n][s]===5?t={x:s,y:n}:e.grid[n][s]===4&&o.push({x:s,y:n});let i=[{type:0,position:a({},o[0]),direction:3,targetPosition:{x:0,y:0},state:0},{type:1,position:a({},o[1]||o[0]),direction:0,targetPosition:{x:0,y:0},state:0},{type:2,position:a({},o[2]||o[0]),direction:1,targetPosition:{x:0,y:0},state:0},{type:3,position:a({},o[3]||o[0]),direction:2,targetPosition:{x:0,y:0},state:0}],r={position:a({},t),direction:4,nextDirection:4,lives:3,score:0};this.gameState.next({level:e,player:r,ghosts:i,dotsEaten:0,powerPelletActive:!1,powerPelletTimer:0,paused:!1,gameOver:!1})}startGameLoop(){this.stopGameLoop(),this.ngZone.runOutsideAngular(()=>{this.gameLoopInterval=setInterval(()=>{this.updateGame()},this.GAME_SPEED)})}stopGameLoop(){this.gameLoopInterval&&clearInterval(this.gameLoopInterval)}updateGame(){let e=this.gameState.value;if(!(!e||e.paused||e.gameOver)){if(this.updatePlayerPosition(e),this.updateGhostPositions(e),this.checkCollisions(e),e.powerPelletActive&&(e.powerPelletTimer-=this.GAME_SPEED,e.powerPelletTimer<=0&&(e.powerPelletActive=!1,e.ghosts.forEach(t=>{t.state===1&&(t.state=0)}))),e.dotsEaten>=e.level.dotCount){this.levelCompleted.next(e.level.id),this.stopGameLoop();return}this.ngZone.run(()=>{this.gameState.next(a({},e))})}}updatePlayerPosition(e){let t=e.player,o=e.level.grid;if(t.nextDirection!==4){let i=this.getNextPosition(t.position,t.nextDirection);this.isValidMove(i,o)&&(t.direction=t.nextDirection)}if(t.direction!==4){let i=this.getNextPosition(t.position,t.direction);if(this.isValidMove(i,o)){t.position=i;let r=o[i.y][i.x];r===2?(o[i.y][i.x]=0,t.score+=10,e.dotsEaten++):r===3&&(o[i.y][i.x]=0,t.score+=50,e.dotsEaten++,e.powerPelletActive=!0,e.powerPelletTimer=this.POWER_PELLET_DURATION,e.ghosts.forEach(n=>{n.state!==2&&(n.state=1)}))}}}updateGhostPositions(e){e.ghosts.forEach(t=>{if(t.state===0)this.updateGhostTargetPosition(t,e);else if(t.state===1)t.targetPosition=this.getRandomPosition(e.level.grid);else if(t.state===2){for(let o=0;o<e.level.grid.length;o++)for(let i=0;i<e.level.grid[o].length;i++)if(e.level.grid[o][i]===4){t.targetPosition={x:i,y:o};break}}this.moveGhostTowardsTarget(t,e.level.grid)})}updateGhostTargetPosition(e,t){let o=t.player;switch(e.type){case 0:e.targetPosition=a({},o.position);break;case 1:let i=this.getNextPosition(o.position,o.direction,4);e.targetPosition=i;break;case 2:let r=this.getNextPosition(o.position,o.direction,2),n=t.ghosts.find(f=>f.type===0);if(n){let f={x:r.x-n.position.x,y:r.y-n.position.y};e.targetPosition={x:r.x+f.x,y:r.y+f.y}}else e.targetPosition=a({},o.position);break;case 3:this.getDistance(e.position,o.position)>8?e.targetPosition=a({},o.position):e.targetPosition={x:0,y:t.level.grid.length-1};break}}moveGhostTowardsTarget(e,t){let o=[],i=this.getOppositeDirection(e.direction);if([0,1,2,3].forEach(r=>{if(r!==i){let n=this.getNextPosition(e.position,r);this.isValidMove(n,t)&&o.push(r)}}),o.length>0){let r=o[0],n=Number.MAX_VALUE;o.forEach(s=>{let f=this.getNextPosition(e.position,s),g=this.getDistance(f,e.targetPosition);g<n&&(n=g,r=s)}),e.direction=r,e.position=this.getNextPosition(e.position,e.direction)}}checkCollisions(e){let t=e.player;e.ghosts.forEach(o=>{this.arePositionsEqual(t.position,o.position)&&(o.state===1?(o.state=2,t.score+=200):o.state===0&&(t.lives--,t.lives<=0?(e.gameOver=!0,this.gameOver.next(t.score),this.stopGameLoop()):this.resetPositions(e)))})}resetPositions(e){let t=null,o=[];for(let i=0;i<e.level.grid.length;i++)for(let r=0;r<e.level.grid[i].length;r++)e.level.grid[i][r]===5?t={x:r,y:i}:e.level.grid[i][r]===4&&o.push({x:r,y:i});t&&(e.player.position=a({},t),e.player.direction=4,e.player.nextDirection=4),e.ghosts.forEach((i,r)=>{i.position=a({},o[r%o.length]),i.state=0,i.direction=4}),e.powerPelletActive=!1,e.powerPelletTimer=0}isValidMove(e,t){return e.y<0||e.y>=t.length||e.x<0||e.x>=t[e.y].length?!1:t[e.y][e.x]!==1}getNextPosition(e,t,o=1){let i=a({},e);switch(t){case 0:i.y-=o;break;case 1:i.x+=o;break;case 2:i.y+=o;break;case 3:i.x-=o;break}return i}getOppositeDirection(e){switch(e){case 0:return 2;case 1:return 3;case 2:return 0;case 3:return 1;default:return 4}}getDistance(e,t){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))}arePositionsEqual(e,t){return e.x===t.x&&e.y===t.y}getRandomPosition(e){let t=e.length,o=e[0].length;for(let i=0;i<20;i++){let r=Math.floor(Math.random()*o),n=Math.floor(Math.random()*t);if(e[n][r]!==1)return{x:r,y:n}}return{x:1,y:1}}static \u0275fac=function(t){return new(t||l)(v(u))};static \u0275prov=h({token:l,factory:l.\u0275fac,providedIn:"root"})};export{c as a,P as b,E as c};
